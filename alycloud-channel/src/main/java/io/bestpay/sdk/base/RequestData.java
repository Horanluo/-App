/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

/**
 * @Copyright 2016 www.bestpay.io Inc. All rights reserved.
 */

package io.bestpay.sdk.base;

import org.apache.avro.specific.SpecificData;

import org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

@SuppressWarnings("all")
/** API请求的数据 */
@javax.xml.bind.annotation.XmlRootElement
@javax.xml.bind.annotation.XmlAccessorType(javax.xml.bind.annotation.XmlAccessType.FIELD)
@javax.xml.bind.annotation.XmlType(name="RequestData", namespace="io.bestpay.sdk.base")
@org.apache.avro.specific.AvroGenerated
public class RequestData extends io.bestpay.framework.base.SpecificRecordBase implements io.bestpay.framework.base.SpecificRecord {
  private static final long serialVersionUID = -7973788863184186465L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RequestData\",\"namespace\":\"io.bestpay.sdk.base\",\"doc\":\"API请求的数据\",\"fields\":[{\"name\":\"app_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"应用id\"},{\"name\":\"sign_type\",\"type\":{\"type\":\"enum\",\"name\":\"SignType\",\"symbols\":[\"AES\",\"SHA256_WITH_RSA\"]},\"doc\":\"签名类型\",\"default\":\"HMAC\"},{\"name\":\"client_trans_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"交易流水号\"},{\"name\":\"trans_timestamp\",\"type\":\"long\",\"doc\":\"时间截\"},{\"name\":\"data\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"请求的数据\",\"default\":\"\"},{\"name\":\"sign\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"签名\",\"default\":\"\"},{\"name\":\"trans_type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"交易类型\"},{\"name\":\"callback_url\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"回调地址\",\"default\":\"\"},{\"name\":\"version\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"版本\",\"default\":\"1.0.0\"}],\"aliases\":[\"RequestData\"]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** 应用id */
  @javax.xml.bind.annotation.XmlElement(name="app_id")
  private java.lang.String app_id;
  /** 签名类型 */
  @javax.xml.bind.annotation.XmlElement(name="sign_type")
  private io.bestpay.sdk.base.SignType sign_type;
  /** 交易流水号 */
  @javax.xml.bind.annotation.XmlElement(name="client_trans_id")
  private java.lang.String client_trans_id;
  /** 时间截 */
  @javax.xml.bind.annotation.XmlElement(name="trans_timestamp")
  private long trans_timestamp;
  /** 请求的数据 */
  @javax.xml.bind.annotation.XmlElement(name="data")
  private java.lang.String data;
  /** 签名 */
  @javax.xml.bind.annotation.XmlElement(name="sign")
  private java.lang.String sign;
  /** 交易类型 */
  @javax.xml.bind.annotation.XmlElement(name="trans_type")
  private java.lang.String trans_type;
  /** 回调地址 */
  @javax.xml.bind.annotation.XmlElement(name="callback_url")
  private java.lang.String callback_url;
  /** 版本 */
  @javax.xml.bind.annotation.XmlElement(name="version")
  private java.lang.String version;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RequestData() {}

  /**
   * All-args constructor.
   * @param app_id 应用id
   * @param sign_type 签名类型
   * @param client_trans_id 交易流水号
   * @param trans_timestamp 时间截
   * @param data 请求的数据
   * @param sign 签名
   * @param trans_type 交易类型
   * @param callback_url 回调地址
   * @param version 版本
   */
  public RequestData(java.lang.String app_id, io.bestpay.sdk.base.SignType sign_type, java.lang.String client_trans_id, java.lang.Long trans_timestamp, java.lang.String data, java.lang.String sign, java.lang.String trans_type, java.lang.String callback_url, java.lang.String version) {
    this.app_id = app_id;
    this.sign_type = sign_type;
    this.client_trans_id = client_trans_id;
    this.trans_timestamp = trans_timestamp;
    this.data = data;
    this.sign = sign;
    this.trans_type = trans_type;
    this.callback_url = callback_url;
    this.version = version;
  }

  @com.fasterxml.jackson.annotation.JsonIgnore
  @org.codehaus.jackson.annotate.JsonIgnore
  @javax.xml.bind.annotation.XmlTransient
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return app_id;
    case 1: return sign_type;
    case 2: return client_trans_id;
    case 3: return trans_timestamp;
    case 4: return data;
    case 5: return sign;
    case 6: return trans_type;
    case 7: return callback_url;
    case 8: return version;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: app_id = (java.lang.String)value$; break;
    case 1: sign_type = (io.bestpay.sdk.base.SignType)value$; break;
    case 2: client_trans_id = (java.lang.String)value$; break;
    case 3: trans_timestamp = (java.lang.Long)value$; break;
    case 4: data = (java.lang.String)value$; break;
    case 5: sign = (java.lang.String)value$; break;
    case 6: trans_type = (java.lang.String)value$; break;
    case 7: callback_url = (java.lang.String)value$; break;
    case 8: version = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'app_id' field.
   * @return 应用id
   */
  @com.fasterxml.jackson.annotation.JsonGetter("app_id")
  @org.codehaus.jackson.annotate.JsonProperty("app_id")   
  @com.fasterxml.jackson.annotation.JsonInclude(Include.NON_NULL)
  @org.codehaus.jackson.map.annotate.JsonSerialize(include=Inclusion.NON_NULL)  
  @javax.xml.bind.annotation.XmlTransient
  public java.lang.String getAppId() {
    return app_id;
  }

  /**
   * Sets the value of the 'app_id' field.
   * 应用id
   * @param value the value to set.
   */
  protected void setAppId(java.lang.String value) {
    this.app_id = value;
  }

  /**
   * Gets the value of the 'sign_type' field.
   * @return 签名类型
   */
  @com.fasterxml.jackson.annotation.JsonGetter("sign_type")
  @org.codehaus.jackson.annotate.JsonProperty("sign_type")   
  @com.fasterxml.jackson.annotation.JsonInclude(Include.NON_NULL)
  @org.codehaus.jackson.map.annotate.JsonSerialize(include=Inclusion.NON_NULL)  
  @javax.xml.bind.annotation.XmlTransient
  public io.bestpay.sdk.base.SignType getSignType() {
    return sign_type;
  }

  /**
   * Sets the value of the 'sign_type' field.
   * 签名类型
   * @param value the value to set.
   */
  protected void setSignType(io.bestpay.sdk.base.SignType value) {
    this.sign_type = value;
  }

  /**
   * Gets the value of the 'client_trans_id' field.
   * @return 交易流水号
   */
  @com.fasterxml.jackson.annotation.JsonGetter("client_trans_id")
  @org.codehaus.jackson.annotate.JsonProperty("client_trans_id")   
  @com.fasterxml.jackson.annotation.JsonInclude(Include.NON_NULL)
  @org.codehaus.jackson.map.annotate.JsonSerialize(include=Inclusion.NON_NULL)  
  @javax.xml.bind.annotation.XmlTransient
  public java.lang.String getClientTransId() {
    return client_trans_id;
  }

  /**
   * Sets the value of the 'client_trans_id' field.
   * 交易流水号
   * @param value the value to set.
   */
  protected void setClientTransId(java.lang.String value) {
    this.client_trans_id = value;
  }

  /**
   * Gets the value of the 'trans_timestamp' field.
   * @return 时间截
   */
  @com.fasterxml.jackson.annotation.JsonGetter("trans_timestamp")
  @org.codehaus.jackson.annotate.JsonProperty("trans_timestamp")   
  @com.fasterxml.jackson.annotation.JsonInclude(Include.NON_NULL)
  @org.codehaus.jackson.map.annotate.JsonSerialize(include=Inclusion.NON_NULL)  
  @javax.xml.bind.annotation.XmlTransient
  public java.lang.Long getTransTimestamp() {
    return trans_timestamp;
  }

  /**
   * Sets the value of the 'trans_timestamp' field.
   * 时间截
   * @param value the value to set.
   */
  protected void setTransTimestamp(java.lang.Long value) {
    this.trans_timestamp = value;
  }

  /**
   * Gets the value of the 'data' field.
   * @return 请求的数据
   */
  @com.fasterxml.jackson.annotation.JsonGetter("data")
  @org.codehaus.jackson.annotate.JsonProperty("data")   
  @com.fasterxml.jackson.annotation.JsonInclude(Include.NON_NULL)
  @org.codehaus.jackson.map.annotate.JsonSerialize(include=Inclusion.NON_NULL)  
  @javax.xml.bind.annotation.XmlTransient
  public java.lang.String getData() {
    return data;
  }

  /**
   * Sets the value of the 'data' field.
   * 请求的数据
   * @param value the value to set.
   */
  protected void setData(java.lang.String value) {
    this.data = value;
  }

  /**
   * Gets the value of the 'sign' field.
   * @return 签名
   */
  @com.fasterxml.jackson.annotation.JsonGetter("sign")
  @org.codehaus.jackson.annotate.JsonProperty("sign")   
  @com.fasterxml.jackson.annotation.JsonInclude(Include.NON_NULL)
  @org.codehaus.jackson.map.annotate.JsonSerialize(include=Inclusion.NON_NULL)  
  @javax.xml.bind.annotation.XmlTransient
  public java.lang.String getSign() {
    return sign;
  }

  /**
   * Sets the value of the 'sign' field.
   * 签名
   * @param value the value to set.
   */
  protected void setSign(java.lang.String value) {
    this.sign = value;
  }

  /**
   * Gets the value of the 'trans_type' field.
   * @return 交易类型
   */
  @com.fasterxml.jackson.annotation.JsonGetter("trans_type")
  @org.codehaus.jackson.annotate.JsonProperty("trans_type")   
  @com.fasterxml.jackson.annotation.JsonInclude(Include.NON_NULL)
  @org.codehaus.jackson.map.annotate.JsonSerialize(include=Inclusion.NON_NULL)  
  @javax.xml.bind.annotation.XmlTransient
  public java.lang.String getTransType() {
    return trans_type;
  }

  /**
   * Sets the value of the 'trans_type' field.
   * 交易类型
   * @param value the value to set.
   */
  protected void setTransType(java.lang.String value) {
    this.trans_type = value;
  }

  /**
   * Gets the value of the 'callback_url' field.
   * @return 回调地址
   */
  @com.fasterxml.jackson.annotation.JsonGetter("callback_url")
  @org.codehaus.jackson.annotate.JsonProperty("callback_url")   
  @com.fasterxml.jackson.annotation.JsonInclude(Include.NON_NULL)
  @org.codehaus.jackson.map.annotate.JsonSerialize(include=Inclusion.NON_NULL)  
  @javax.xml.bind.annotation.XmlTransient
  public java.lang.String getCallbackUrl() {
    return callback_url;
  }

  /**
   * Sets the value of the 'callback_url' field.
   * 回调地址
   * @param value the value to set.
   */
  protected void setCallbackUrl(java.lang.String value) {
    this.callback_url = value;
  }

  /**
   * Gets the value of the 'version' field.
   * @return 版本
   */
  @com.fasterxml.jackson.annotation.JsonGetter("version")
  @org.codehaus.jackson.annotate.JsonProperty("version")   
  @com.fasterxml.jackson.annotation.JsonInclude(Include.NON_NULL)
  @org.codehaus.jackson.map.annotate.JsonSerialize(include=Inclusion.NON_NULL)  
  @javax.xml.bind.annotation.XmlTransient
  public java.lang.String getVersion() {
    return version;
  }

  /**
   * Sets the value of the 'version' field.
   * 版本
   * @param value the value to set.
   */
  protected void setVersion(java.lang.String value) {
    this.version = value;
  }

  /**
   * Creates a new RequestData RecordBuilder.
   * @return A new RequestData RecordBuilder
   */
  public static io.bestpay.sdk.base.RequestData.Builder newBuilder() {
    return new io.bestpay.sdk.base.RequestData.Builder();
  }

  /**
   * Creates a new RequestData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RequestData RecordBuilder
   */
  public static io.bestpay.sdk.base.RequestData.Builder newBuilder(io.bestpay.sdk.base.RequestData.Builder other) {
    return new io.bestpay.sdk.base.RequestData.Builder(other);
  }

  /**
   * Creates a new RequestData RecordBuilder by copying an existing RequestData instance.
   * @param other The existing instance to copy.
   * @return A new RequestData RecordBuilder
   */
  public static io.bestpay.sdk.base.RequestData.Builder newBuilder(io.bestpay.sdk.base.RequestData other) {
    return new io.bestpay.sdk.base.RequestData.Builder(other);
  }

  /**
   * RecordBuilder for RequestData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RequestData>
    implements org.apache.avro.data.RecordBuilder<RequestData> {

    /** 应用id */
    private java.lang.String app_id;
    /** 签名类型 */
    private io.bestpay.sdk.base.SignType sign_type;
    /** 交易流水号 */
    private java.lang.String client_trans_id;
    /** 时间截 */
    private long trans_timestamp;
    /** 请求的数据 */
    private java.lang.String data;
    /** 签名 */
    private java.lang.String sign;
    /** 交易类型 */
    private java.lang.String trans_type;
    /** 回调地址 */
    private java.lang.String callback_url;
    /** 版本 */
    private java.lang.String version;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.bestpay.sdk.base.RequestData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.app_id)) {
        this.app_id = data().deepCopy(fields()[0].schema(), other.app_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sign_type)) {
        this.sign_type = data().deepCopy(fields()[1].schema(), other.sign_type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.client_trans_id)) {
        this.client_trans_id = data().deepCopy(fields()[2].schema(), other.client_trans_id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.trans_timestamp)) {
        this.trans_timestamp = data().deepCopy(fields()[3].schema(), other.trans_timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.data)) {
        this.data = data().deepCopy(fields()[4].schema(), other.data);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.sign)) {
        this.sign = data().deepCopy(fields()[5].schema(), other.sign);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.trans_type)) {
        this.trans_type = data().deepCopy(fields()[6].schema(), other.trans_type);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.callback_url)) {
        this.callback_url = data().deepCopy(fields()[7].schema(), other.callback_url);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.version)) {
        this.version = data().deepCopy(fields()[8].schema(), other.version);
        fieldSetFlags()[8] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing RequestData instance
     * @param other The existing instance to copy.
     */
    private Builder(io.bestpay.sdk.base.RequestData other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.app_id)) {
        this.app_id = data().deepCopy(fields()[0].schema(), other.app_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sign_type)) {
        this.sign_type = data().deepCopy(fields()[1].schema(), other.sign_type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.client_trans_id)) {
        this.client_trans_id = data().deepCopy(fields()[2].schema(), other.client_trans_id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.trans_timestamp)) {
        this.trans_timestamp = data().deepCopy(fields()[3].schema(), other.trans_timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.data)) {
        this.data = data().deepCopy(fields()[4].schema(), other.data);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.sign)) {
        this.sign = data().deepCopy(fields()[5].schema(), other.sign);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.trans_type)) {
        this.trans_type = data().deepCopy(fields()[6].schema(), other.trans_type);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.callback_url)) {
        this.callback_url = data().deepCopy(fields()[7].schema(), other.callback_url);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.version)) {
        this.version = data().deepCopy(fields()[8].schema(), other.version);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'app_id' field.
      * 应用id
      * @return The value.
      */
    public java.lang.String getAppId() {
      return app_id;
    }

    /**
      * Sets the value of the 'app_id' field.
      * 应用id
      * @param value The value of 'app_id'.
      * @return This builder.
      */
    public io.bestpay.sdk.base.RequestData.Builder setAppId(java.lang.String value) {
      validate(fields()[0], value);
      this.app_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'app_id' field has been set.
      * 应用id
      * @return True if the 'app_id' field has been set, false otherwise.
      */
    public boolean hasAppId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'app_id' field.
      * 应用id
      * @return This builder.
      */
    public io.bestpay.sdk.base.RequestData.Builder clearAppId() {
      app_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sign_type' field.
      * 签名类型
      * @return The value.
      */
    public io.bestpay.sdk.base.SignType getSignType() {
      return sign_type;
    }

    /**
      * Sets the value of the 'sign_type' field.
      * 签名类型
      * @param value The value of 'sign_type'.
      * @return This builder.
      */
    public io.bestpay.sdk.base.RequestData.Builder setSignType(io.bestpay.sdk.base.SignType value) {
      validate(fields()[1], value);
      this.sign_type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sign_type' field has been set.
      * 签名类型
      * @return True if the 'sign_type' field has been set, false otherwise.
      */
    public boolean hasSignType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sign_type' field.
      * 签名类型
      * @return This builder.
      */
    public io.bestpay.sdk.base.RequestData.Builder clearSignType() {
      sign_type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'client_trans_id' field.
      * 交易流水号
      * @return The value.
      */
    public java.lang.String getClientTransId() {
      return client_trans_id;
    }

    /**
      * Sets the value of the 'client_trans_id' field.
      * 交易流水号
      * @param value The value of 'client_trans_id'.
      * @return This builder.
      */
    public io.bestpay.sdk.base.RequestData.Builder setClientTransId(java.lang.String value) {
      validate(fields()[2], value);
      this.client_trans_id = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'client_trans_id' field has been set.
      * 交易流水号
      * @return True if the 'client_trans_id' field has been set, false otherwise.
      */
    public boolean hasClientTransId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'client_trans_id' field.
      * 交易流水号
      * @return This builder.
      */
    public io.bestpay.sdk.base.RequestData.Builder clearClientTransId() {
      client_trans_id = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'trans_timestamp' field.
      * 时间截
      * @return The value.
      */
    public java.lang.Long getTransTimestamp() {
      return trans_timestamp;
    }

    /**
      * Sets the value of the 'trans_timestamp' field.
      * 时间截
      * @param value The value of 'trans_timestamp'.
      * @return This builder.
      */
    public io.bestpay.sdk.base.RequestData.Builder setTransTimestamp(long value) {
      validate(fields()[3], value);
      this.trans_timestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'trans_timestamp' field has been set.
      * 时间截
      * @return True if the 'trans_timestamp' field has been set, false otherwise.
      */
    public boolean hasTransTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'trans_timestamp' field.
      * 时间截
      * @return This builder.
      */
    public io.bestpay.sdk.base.RequestData.Builder clearTransTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'data' field.
      * 请求的数据
      * @return The value.
      */
    public java.lang.String getData() {
      return data;
    }

    /**
      * Sets the value of the 'data' field.
      * 请求的数据
      * @param value The value of 'data'.
      * @return This builder.
      */
    public io.bestpay.sdk.base.RequestData.Builder setData(java.lang.String value) {
      validate(fields()[4], value);
      this.data = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'data' field has been set.
      * 请求的数据
      * @return True if the 'data' field has been set, false otherwise.
      */
    public boolean hasData() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'data' field.
      * 请求的数据
      * @return This builder.
      */
    public io.bestpay.sdk.base.RequestData.Builder clearData() {
      data = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'sign' field.
      * 签名
      * @return The value.
      */
    public java.lang.String getSign() {
      return sign;
    }

    /**
      * Sets the value of the 'sign' field.
      * 签名
      * @param value The value of 'sign'.
      * @return This builder.
      */
    public io.bestpay.sdk.base.RequestData.Builder setSign(java.lang.String value) {
      validate(fields()[5], value);
      this.sign = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'sign' field has been set.
      * 签名
      * @return True if the 'sign' field has been set, false otherwise.
      */
    public boolean hasSign() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'sign' field.
      * 签名
      * @return This builder.
      */
    public io.bestpay.sdk.base.RequestData.Builder clearSign() {
      sign = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'trans_type' field.
      * 交易类型
      * @return The value.
      */
    public java.lang.String getTransType() {
      return trans_type;
    }

    /**
      * Sets the value of the 'trans_type' field.
      * 交易类型
      * @param value The value of 'trans_type'.
      * @return This builder.
      */
    public io.bestpay.sdk.base.RequestData.Builder setTransType(java.lang.String value) {
      validate(fields()[6], value);
      this.trans_type = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'trans_type' field has been set.
      * 交易类型
      * @return True if the 'trans_type' field has been set, false otherwise.
      */
    public boolean hasTransType() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'trans_type' field.
      * 交易类型
      * @return This builder.
      */
    public io.bestpay.sdk.base.RequestData.Builder clearTransType() {
      trans_type = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'callback_url' field.
      * 回调地址
      * @return The value.
      */
    public java.lang.String getCallbackUrl() {
      return callback_url;
    }

    /**
      * Sets the value of the 'callback_url' field.
      * 回调地址
      * @param value The value of 'callback_url'.
      * @return This builder.
      */
    public io.bestpay.sdk.base.RequestData.Builder setCallbackUrl(java.lang.String value) {
      validate(fields()[7], value);
      this.callback_url = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'callback_url' field has been set.
      * 回调地址
      * @return True if the 'callback_url' field has been set, false otherwise.
      */
    public boolean hasCallbackUrl() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'callback_url' field.
      * 回调地址
      * @return This builder.
      */
    public io.bestpay.sdk.base.RequestData.Builder clearCallbackUrl() {
      callback_url = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'version' field.
      * 版本
      * @return The value.
      */
    public java.lang.String getVersion() {
      return version;
    }

    /**
      * Sets the value of the 'version' field.
      * 版本
      * @param value The value of 'version'.
      * @return This builder.
      */
    public io.bestpay.sdk.base.RequestData.Builder setVersion(java.lang.String value) {
      validate(fields()[8], value);
      this.version = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'version' field has been set.
      * 版本
      * @return True if the 'version' field has been set, false otherwise.
      */
    public boolean hasVersion() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'version' field.
      * 版本
      * @return This builder.
      */
    public io.bestpay.sdk.base.RequestData.Builder clearVersion() {
      version = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    public RequestData build() {
      try {
        RequestData record = new RequestData();
        record.app_id = fieldSetFlags()[0] ? this.app_id : (java.lang.String) defaultValue(fields()[0]);
        record.sign_type = fieldSetFlags()[1] ? this.sign_type : (io.bestpay.sdk.base.SignType) defaultValue(fields()[1]);
        record.client_trans_id = fieldSetFlags()[2] ? this.client_trans_id : (java.lang.String) defaultValue(fields()[2]);
        record.trans_timestamp = fieldSetFlags()[3] ? this.trans_timestamp : (java.lang.Long) defaultValue(fields()[3]);
        record.data = fieldSetFlags()[4] ? this.data : (java.lang.String) defaultValue(fields()[4]);
        record.sign = fieldSetFlags()[5] ? this.sign : (java.lang.String) defaultValue(fields()[5]);
        record.trans_type = fieldSetFlags()[6] ? this.trans_type : (java.lang.String) defaultValue(fields()[6]);
        record.callback_url = fieldSetFlags()[7] ? this.callback_url : (java.lang.String) defaultValue(fields()[7]);
        record.version = fieldSetFlags()[8] ? this.version : (java.lang.String) defaultValue(fields()[8]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
