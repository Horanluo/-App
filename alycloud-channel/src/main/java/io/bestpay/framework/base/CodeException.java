/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
/**
 * @Copyright 2016 www.bestpay.io Inc. All rights reserved.
 */

package io.bestpay.framework.base;

import org.apache.avro.specific.SpecificData;
import org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion;

import com.fasterxml.jackson.annotation.JsonInclude.Include;

@SuppressWarnings("all")
@javax.xml.bind.annotation.XmlRootElement
@javax.xml.bind.annotation.XmlAccessorType(javax.xml.bind.annotation.XmlAccessType.FIELD)
@javax.xml.bind.annotation.XmlType(name = "CodeException", namespace = "io.bestpay.framework.base")
@org.apache.avro.specific.AvroGenerated
public class CodeException extends io.bestpay.framework.base.SpecificExceptionBase
		implements org.apache.avro.specific.SpecificRecord {
	private static final long serialVersionUID = 3769779288215267575L;
	public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse(
			"{\"type\":\"error\",\"name\":\"CodeException\",\"namespace\":\"io.bestpay.framework.base\",\"fields\":[{\"name\":\"err_code\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"错误代码\"},{\"name\":\"err_msg\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"错误消息\"}],\"aliases\":[\"CodeException\"]}");

	public static org.apache.avro.Schema getClassSchema() {
		return SCHEMA$;
	}

	/** 错误代码 */
	@javax.xml.bind.annotation.XmlElement(name = "err_code")
	private java.lang.String err_code;
	/** 错误消息 */
	@javax.xml.bind.annotation.XmlElement(name = "err_msg")
	private java.lang.String err_msg;

	public CodeException() {
		super();
	}

	public CodeException(Object value) {
		super(value);
	}

	public CodeException(Throwable cause) {
		super(cause);
	}

	public CodeException(Object value, Throwable cause) {
		super(value, cause);
	}

	@com.fasterxml.jackson.annotation.JsonIgnore
	@org.codehaus.jackson.annotate.JsonIgnore
	@javax.xml.bind.annotation.XmlTransient
	public org.apache.avro.Schema getSchema() {
		return SCHEMA$;
	}

	// Used by DatumWriter. Applications should not call.
	public java.lang.Object get(int field$) {
		switch (field$) {
		case 0:
			return err_code;
		case 1:
			return err_msg;
		default:
			throw new org.apache.avro.AvroRuntimeException("Bad index");
		}
	}

	// Used by DatumReader. Applications should not call.
	@SuppressWarnings(value = "unchecked")
	public void put(int field$, java.lang.Object value$) {
		switch (field$) {
		case 0:
			err_code = (java.lang.String) value$;
			break;
		case 1:
			err_msg = (java.lang.String) value$;
			break;
		default:
			throw new org.apache.avro.AvroRuntimeException("Bad index");
		}
	}

	/**
	 * Gets the value of the 'err_code' field.
	 * 
	 * @return 错误代码
	 */
	@com.fasterxml.jackson.annotation.JsonGetter("err_code")
	@org.codehaus.jackson.annotate.JsonProperty("err_code")
	@com.fasterxml.jackson.annotation.JsonInclude(Include.NON_NULL)
	@org.codehaus.jackson.map.annotate.JsonSerialize(include = Inclusion.NON_NULL)
	@javax.xml.bind.annotation.XmlTransient
	public java.lang.String getErrCode() {
		return err_code;
	}

	/**
	 * Sets the value of the 'err_code' field. 错误代码
	 * 
	 * @param value
	 *            the value to set.
	 */
	protected void setErrCode(java.lang.String value) {
		this.err_code = value;
	}

	/**
	 * Gets the value of the 'err_msg' field.
	 * 
	 * @return 错误消息
	 */
	@com.fasterxml.jackson.annotation.JsonGetter("err_msg")
	@org.codehaus.jackson.annotate.JsonProperty("err_msg")
	@com.fasterxml.jackson.annotation.JsonInclude(Include.NON_NULL)
	@org.codehaus.jackson.map.annotate.JsonSerialize(include = Inclusion.NON_NULL)
	@javax.xml.bind.annotation.XmlTransient
	public java.lang.String getErrMsg() {
		return err_msg;
	}

	/**
	 * Sets the value of the 'err_msg' field. 错误消息
	 * 
	 * @param value
	 *            the value to set.
	 */
	protected void setErrMsg(java.lang.String value) {
		this.err_msg = value;
	}

	/**
	 * Creates a new CodeException RecordBuilder.
	 * 
	 * @return A new CodeException RecordBuilder
	 */
	public static io.bestpay.framework.base.CodeException.Builder newBuilder() {
		return new io.bestpay.framework.base.CodeException.Builder();
	}

	/**
	 * Creates a new CodeException RecordBuilder by copying an existing Builder.
	 * 
	 * @param other
	 *            The existing builder to copy.
	 * @return A new CodeException RecordBuilder
	 */
	public static io.bestpay.framework.base.CodeException.Builder newBuilder(
			io.bestpay.framework.base.CodeException.Builder other) {
		return new io.bestpay.framework.base.CodeException.Builder(other);
	}

	/**
	 * Creates a new CodeException RecordBuilder by copying an existing
	 * CodeException instance.
	 * 
	 * @param other
	 *            The existing instance to copy.
	 * @return A new CodeException RecordBuilder
	 */
	public static io.bestpay.framework.base.CodeException.Builder newBuilder(
			io.bestpay.framework.base.CodeException other) {
		return new io.bestpay.framework.base.CodeException.Builder(other);
	}

	/**
	 * RecordBuilder for CodeException instances.
	 */
	public static class Builder extends org.apache.avro.specific.SpecificErrorBuilderBase<CodeException>
			implements org.apache.avro.data.ErrorBuilder<CodeException> {

		/** 错误代码 */
		private java.lang.String err_code;
		/** 错误消息 */
		private java.lang.String err_msg;

		/** Creates a new Builder */
		private Builder() {
			super(SCHEMA$);
		}

		/**
		 * Creates a Builder by copying an existing Builder.
		 * 
		 * @param other
		 *            The existing Builder to copy.
		 */
		private Builder(io.bestpay.framework.base.CodeException.Builder other) {
			super(other);
			if (isValidValue(fields()[0], other.err_code)) {
				this.err_code = data().deepCopy(fields()[0].schema(), other.err_code);
				fieldSetFlags()[0] = true;
			}
			if (isValidValue(fields()[1], other.err_msg)) {
				this.err_msg = data().deepCopy(fields()[1].schema(), other.err_msg);
				fieldSetFlags()[1] = true;
			}
		}

		/**
		 * Creates a Builder by copying an existing CodeException instance
		 * 
		 * @param other
		 *            The existing instance to copy.
		 */
		private Builder(io.bestpay.framework.base.CodeException other) {
			super(other);
			if (isValidValue(fields()[0], other.err_code)) {
				this.err_code = data().deepCopy(fields()[0].schema(), other.err_code);
				fieldSetFlags()[0] = true;
			}
			if (isValidValue(fields()[1], other.err_msg)) {
				this.err_msg = data().deepCopy(fields()[1].schema(), other.err_msg);
				fieldSetFlags()[1] = true;
			}
		}

		@Override
		public io.bestpay.framework.base.CodeException.Builder setValue(Object value) {
			super.setValue(value);
			return this;
		}

		@Override
		public io.bestpay.framework.base.CodeException.Builder clearValue() {
			super.clearValue();
			return this;
		}

		@Override
		public io.bestpay.framework.base.CodeException.Builder setCause(Throwable cause) {
			super.setCause(cause);
			return this;
		}

		@Override
		public io.bestpay.framework.base.CodeException.Builder clearCause() {
			super.clearCause();
			return this;
		}

		/**
		 * Gets the value of the 'err_code' field. 错误代码
		 * 
		 * @return The value.
		 */
		public java.lang.String getErrCode() {
			return err_code;
		}

		/**
		 * Sets the value of the 'err_code' field. 错误代码
		 * 
		 * @param value
		 *            The value of 'err_code'.
		 * @return This builder.
		 */
		public io.bestpay.framework.base.CodeException.Builder setErrCode(java.lang.String value) {
			validate(fields()[0], value);
			this.err_code = value;
			fieldSetFlags()[0] = true;
			return this;
		}

		/**
		 * Checks whether the 'err_code' field has been set. 错误代码
		 * 
		 * @return True if the 'err_code' field has been set, false otherwise.
		 */
		public boolean hasErrCode() {
			return fieldSetFlags()[0];
		}

		/**
		 * Clears the value of the 'err_code' field. 错误代码
		 * 
		 * @return This builder.
		 */
		public io.bestpay.framework.base.CodeException.Builder clearErrCode() {
			err_code = null;
			fieldSetFlags()[0] = false;
			return this;
		}

		/**
		 * Gets the value of the 'err_msg' field. 错误消息
		 * 
		 * @return The value.
		 */
		public java.lang.String getErrMsg() {
			return err_msg;
		}

		/**
		 * Sets the value of the 'err_msg' field. 错误消息
		 * 
		 * @param value
		 *            The value of 'err_msg'.
		 * @return This builder.
		 */
		public io.bestpay.framework.base.CodeException.Builder setErrMsg(java.lang.String value) {
			validate(fields()[1], value);
			this.err_msg = value;
			fieldSetFlags()[1] = true;
			return this;
		}

		/**
		 * Checks whether the 'err_msg' field has been set. 错误消息
		 * 
		 * @return True if the 'err_msg' field has been set, false otherwise.
		 */
		public boolean hasErrMsg() {
			return fieldSetFlags()[1];
		}

		/**
		 * Clears the value of the 'err_msg' field. 错误消息
		 * 
		 * @return This builder.
		 */
		public io.bestpay.framework.base.CodeException.Builder clearErrMsg() {
			err_msg = null;
			fieldSetFlags()[1] = false;
			return this;
		}

		@Override
		public CodeException build() {
			try {
				CodeException record = new CodeException(getValue(), getCause());
				record.err_code = fieldSetFlags()[0] ? this.err_code : (java.lang.String) defaultValue(fields()[0]);
				record.err_msg = fieldSetFlags()[1] ? this.err_msg : (java.lang.String) defaultValue(fields()[1]);
				return record;
			} catch (Exception e) {
				throw new org.apache.avro.AvroRuntimeException(e);
			}
		}
	}

	private static final org.apache.avro.io.DatumWriter WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(
			SCHEMA$);

	@Override
	public void writeExternal(java.io.ObjectOutput out) throws java.io.IOException {
		WRITER$.write(this, SpecificData.getEncoder(out));
	}

	private static final org.apache.avro.io.DatumReader READER$ = new org.apache.avro.specific.SpecificDatumReader(
			SCHEMA$);

	@Override
	public void readExternal(java.io.ObjectInput in) throws java.io.IOException {
		READER$.read(this, SpecificData.getDecoder(in));
	}

}
