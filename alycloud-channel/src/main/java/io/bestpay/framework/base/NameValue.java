/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

/**
 * @Copyright 2016 www.bestpay.io Inc. All rights reserved.
 */

package io.bestpay.framework.base;

import org.apache.avro.specific.SpecificData;

import org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

@SuppressWarnings("all")
/** 键值对 */
@javax.xml.bind.annotation.XmlRootElement
@javax.xml.bind.annotation.XmlAccessorType(javax.xml.bind.annotation.XmlAccessType.FIELD)
@javax.xml.bind.annotation.XmlType(name="NameValue", namespace="io.bestpay.framework.base")
@org.apache.avro.specific.AvroGenerated
public class NameValue extends io.bestpay.framework.base.SpecificRecordBase implements io.bestpay.framework.base.SpecificRecord {
  private static final long serialVersionUID = 2518685504278774815L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"NameValue\",\"namespace\":\"io.bestpay.framework.base\",\"doc\":\"键值对\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"名称\",\"default\":\"\"},{\"name\":\"value\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"值\",\"default\":\"\"}],\"aliases\":[\"NameValue\"]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** 名称 */
  @javax.xml.bind.annotation.XmlElement(name="name")
  private java.lang.String name;
  /** 值 */
  @javax.xml.bind.annotation.XmlElement(name="value")
  private java.lang.String value;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public NameValue() {}

  /**
   * All-args constructor.
   * @param name 名称
   * @param value 值
   */
  public NameValue(java.lang.String name, java.lang.String value) {
    this.name = name;
    this.value = value;
  }

  @com.fasterxml.jackson.annotation.JsonIgnore
  @org.codehaus.jackson.annotate.JsonIgnore
  @javax.xml.bind.annotation.XmlTransient
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return value;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.String)value$; break;
    case 1: value = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return 名称
   */
  @com.fasterxml.jackson.annotation.JsonGetter("name")
  @org.codehaus.jackson.annotate.JsonProperty("name")   
  @com.fasterxml.jackson.annotation.JsonInclude(Include.NON_NULL)
  @org.codehaus.jackson.map.annotate.JsonSerialize(include=Inclusion.NON_NULL)  
  @javax.xml.bind.annotation.XmlTransient
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * 名称
   * @param value the value to set.
   */
  protected void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return 值
   */
  @com.fasterxml.jackson.annotation.JsonGetter("value")
  @org.codehaus.jackson.annotate.JsonProperty("value")   
  @com.fasterxml.jackson.annotation.JsonInclude(Include.NON_NULL)
  @org.codehaus.jackson.map.annotate.JsonSerialize(include=Inclusion.NON_NULL)  
  @javax.xml.bind.annotation.XmlTransient
  public java.lang.String getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * 值
   * @param value the value to set.
   */
  protected void setValue(java.lang.String value) {
    this.value = value;
  }

  /**
   * Creates a new NameValue RecordBuilder.
   * @return A new NameValue RecordBuilder
   */
  public static io.bestpay.framework.base.NameValue.Builder newBuilder() {
    return new io.bestpay.framework.base.NameValue.Builder();
  }

  /**
   * Creates a new NameValue RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new NameValue RecordBuilder
   */
  public static io.bestpay.framework.base.NameValue.Builder newBuilder(io.bestpay.framework.base.NameValue.Builder other) {
    return new io.bestpay.framework.base.NameValue.Builder(other);
  }

  /**
   * Creates a new NameValue RecordBuilder by copying an existing NameValue instance.
   * @param other The existing instance to copy.
   * @return A new NameValue RecordBuilder
   */
  public static io.bestpay.framework.base.NameValue.Builder newBuilder(io.bestpay.framework.base.NameValue other) {
    return new io.bestpay.framework.base.NameValue.Builder(other);
  }

  /**
   * RecordBuilder for NameValue instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<NameValue>
    implements org.apache.avro.data.RecordBuilder<NameValue> {

    /** 名称 */
    private java.lang.String name;
    /** 值 */
    private java.lang.String value;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.bestpay.framework.base.NameValue.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing NameValue instance
     * @param other The existing instance to copy.
     */
    private Builder(io.bestpay.framework.base.NameValue other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * 名称
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * 名称
      * @param value The value of 'name'.
      * @return This builder.
      */
    public io.bestpay.framework.base.NameValue.Builder setName(java.lang.String value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * 名称
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * 名称
      * @return This builder.
      */
    public io.bestpay.framework.base.NameValue.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * 值
      * @return The value.
      */
    public java.lang.String getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * 值
      * @param value The value of 'value'.
      * @return This builder.
      */
    public io.bestpay.framework.base.NameValue.Builder setValue(java.lang.String value) {
      validate(fields()[1], value);
      this.value = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * 值
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'value' field.
      * 值
      * @return This builder.
      */
    public io.bestpay.framework.base.NameValue.Builder clearValue() {
      value = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public NameValue build() {
      try {
        NameValue record = new NameValue();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.String) defaultValue(fields()[0]);
        record.value = fieldSetFlags()[1] ? this.value : (java.lang.String) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
